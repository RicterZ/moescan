# coding=utf-8
import os
import urlparse
import traceback
from lib.logger import logger


class BaseExploit(object):
    target = None
    port = None
    result = None
    target_netloc = None
    protocol = 'http'

    def __init__(self, target=None, port=None, **extra_arg):
        self.target = target
        self.port = port
        self.extra_arg = extra_arg

    def exploit(self):
        raise NotImplemented

    def _fix_url(self):
        url = urlparse.urlparse(self.target)
        if url.port:
            self.port = url.port
        else:
            if url.scheme == 'https':
                self.port = 443
            else:
                self.port = 80
        # just a baka urlparse
        # google.com => path: google.com, netloc: ''
        # http://google.com => path: '', netloc: google.com
        netloc = url.netloc if url.scheme else url.path
        scheme = url.scheme if url.scheme else 'http'
        path = url.path if url.scheme else ''
        target = '{}://{}/{}'.format(scheme, netloc, path)

        while 1:
            if target.endswith('/'):
                target = target[:-1]
            else:
                break

        self.target_netloc = netloc
        self.target = target

    def run(self):
        if not self.target:
            raise Exception('Target not set')

        if self.protocol == 'http':
            self._fix_url()

        return self.exploit()


def run(exploit, target, port=None, **extra_arg):
    if not exploit:
        raise Exception('No exploit script to run')

    if not os.path.exists('scripts/{}.py'.format(exploit)):
        raise ImportError('scripts.{}'.format(exploit))

    module = __import__('scripts.{}'.format(exploit))
    exp = module.__dict__[exploit]
    if 'Exploit' not in exp.__dict__:
        raise Exception('Exploit class not exist')

    try:
        exp = exp.Exploit(target=target, port=port, **extra_arg)
        return exp.run()
    except Exception, e:
        traceback.print_exc()
        logger.critical('Exploit script RuntimeError: {}'.format(str(e)))
    except KeyboardInterrupt:
        logger.error('User aborted')

    return {'result': {}, 'status': False}
